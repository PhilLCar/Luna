#! /usr/bin/env lua
local i = 1
comp_flags = {}
comp_code = ""
comp_name = ""

function help()
   print("Usage:\n\n\tluna {-flag} file[.lua] [target[.s|.o|.exe]]\n\n" ..
	    "If no extension is specified in the target, it will be considered as a path.\n\n" ..
	    "\t-lib\tCompiles the target file as a library file.\n" ..
	       "\t\tWill compile to .s by default but can compile an object" ..
	       "file if the extension\n\t\t.o is specified\n\n" ..
	    "\t-i\tPrints information about the compiler\n\n" ..
	 "\t-S\tProduces an assembly code for the program\n\n" ..
	    "\t-f\tCompiles the program as a collection of C functions\n" ..
	    "\t\tIn this mode there is no variable number of arguments or closure support.\n\n" ..
	    "\t-s\tKeeps the subfiles created during the compiling process.\n\n" ..
	    "\t-h\tHelp command\n")
   os.exit()
end

function getname(name)
   for i = 1, #name do
      local s = name:sub(i, i)
      if s == "/" then
	 comp_name = ""
      else
	 comp_name = comp_name .. s
      end
   end
end

while arg[i] and arg[i]:sub(1, 1) == "-" do
   local a = arg[i]
   if a == "-lib" then   -- Compiles a librairy file
      comp_flags.lib = true
   elseif a == "-i" then -- Gives information about the program
      comp_flags.inf = true
   elseif a == "-S" then -- Stops compilation at the assembler level
      comp_flags.asm = true
   elseif a == "-f" then -- Compile code to be executed by C code
      comp_flags.fnc = true
   elseif a == "-s" then -- Saves the subfiles
      comp_flags.sub = true
   elseif a == "-h" then -- help
      help()
   end
   i = i + 1
end

if not comp_flags.inf then
   comp_file = arg[i]
   if comp_file == nil then
      print("No configuration of luna takes 0 arguments. Try with -h for help.")
      os.exit()
   end
end

if comp_flags.inf then
   print("LUNA [Lua Compiler] V1.0 (2017)\n\tAuthor: Philippe Caron\n")
end

if comp_file then
   if comp_file:sub(#comp_file - 3, #comp_file) == ".lua" then
      comp_file = comp_file:sub(1, #comp_file - 4)
   end

   -- EVENTUALLY: CHECK FOR FLAG CONFLICTS
   if arg[i + 1] ~= nil then
      comp_target = arg[i + 1]
      local ext = comp_target:sub(#comp_target - 1, #comp_target)
      if ext == ".s" then
	 comp_target = comp_target:sub(1, #comp_target - 2)
	 comp_flags.asm = true
	 getname(comp_target)
      elseif ext == ".o" then
	 comp_target = comp_target:sub(1, #comp_target - 2)
	 comp_flags.lib = true
	 getname(comp_target)
      elseif comp_target:sub(#comp_target - 3, #comp_target) == ".exe" then
	 comp_target = comp_target:sub(1, #comp_target - 2)
	 getname(comp_target)
      elseif comp_target:sub(#comp_target, #comp_target) ~= "/" then
	 getname(comp_file)
	 comp_target = comp_target .. "/" .. comp_name
      else
	 getname(comp_file)
	 comp_target = comp_target .. comp_name
      end
   else
      comp_target = comp_file
      getname(comp_target)
   end
      
   local file = io.open(comp_file .. ".lua", "r")
   local text = file:read("all")
   file:close()
   comp_code = text
   
   require("preprocessor")
   require("compiler")
   require("ir-compiler")
   -- ATTENTION CHEMIN RELATIF, NE FONCTIONNERA PAS PARTOUT!!
   if not comp_flags.asm then
      if comp_flags.lib then
	 os.execute("gcc -c " .. comp_target .. ".s -o " .. comp_target .. ".o")
      else
	 os.execute("gcc ./library/o/*.o " .. comp_target .. ".s -o " .. comp_target .. ".exe")
      end
   end
   if not comp_flags.asm and not comp_flags.sub then
      os.execute("rm " .. comp_target .. ".s")
   end
end
